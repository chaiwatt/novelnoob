<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\CreditPackage;
use Illuminate\Support\Facades\Validator;

class AdminDashboardController extends Controller
{
    public function index()
    {
        $packages = CreditPackage::orderBy('credits', 'asc')->get();
        return view('admin.dashboard.index', [
            'packages' => $packages
        ]);
    }
    /**
     * Update the credit packages.
     */
   public function updatePackages(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'packages' => 'required|array',
            'packages.*.credits' => 'required|integer|min:0', // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å credits ‡πÉ‡∏ô array
            'packages.*.price' => 'required|integer|min:0', // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å price ‡πÉ‡∏ô array
            'is_highlighted' => 'required|integer|exists:credit_packages,id' // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ID ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á
        ]);

        if ($validator->fails()) {
            return back()->withErrors($validator)->withInput();
        }

        $packageInputs = $request->input('packages');
        $highlightedId = (int)$request->input('is_highlighted');

        try {
            // --- üí° ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---

            $packageIds = array_keys($packageInputs);
            $allPackages = CreditPackage::findMany($packageIds);

            foreach ($allPackages as $package) {
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• input ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö package ‡∏ô‡∏µ‡πâ (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ)
                if (isset($packageInputs[$package->id])) {
                    $data = $packageInputs[$package->id];
                    
                    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï credits ‡πÅ‡∏•‡∏∞ price
                    $package->credits = $data['credits'];
                    $package->price = $data['price'];

                    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï is_highlighted (true ‡∏ñ‡πâ‡∏≤ ID ‡∏ï‡∏£‡∏á, false ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á)
                    $package->is_highlighted = ($package->id == $highlightedId);

                    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏•‡∏á Database
                    $package->save();
                }
            }
            // --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---

        } catch (\Exception $e) {
            // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£ Rollback ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ Transaction
            // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error (‡πÄ‡∏ä‡πà‡∏ô log ‡πÑ‡∏ß‡πâ)
            return back()->with('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ' . $e->getMessage());
        }
        
        return back()->with('success', '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    }
}
